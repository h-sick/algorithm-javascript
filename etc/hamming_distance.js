function solution(str1, str2) {
  const getHammingDistance = (s1, s2) => {
    if (s1.length !== s2.length) return 0;
    let dist = 0;
    for (let i = 0; i < s1.length; i++) {
      if (s1[i] !== s2[i]) dist += 1;
    }
    return dist;
  };

  let min = getHammingDistance(str1.slice(0, str2.length), str2);
  let indexes = [0];

  let distance = min;
  let left = 0;
  for (let right = str2.length; right < str1.length; right++) {
    left++;
    if (str1[left - 1] !== str2[0]) distance -= 1;
    if (str1[right - 1] !== str2[str2.length - 1]) distance -= 1;

    if (str1[left] !== str2[0]) distance += 1;
    if (str1[right] !== str2[str2.length - 1]) distance += 1;

    if (min < distance) continue;
    if (min === distance) indexes.push(left + 1);
    if (min > distance) indexes = [left + 1];
    min = distance;
  }
  return indexes;
}

console.log(solution('AGATAGATAGAATGATT', 'AA')); // 11
// console.log(
//   solution(
//     'CTTGGTACACGGAACGTTCTGAAAAGAGCTATGAATTGCAGACACCTTTTGAAATTAAATTGGCAAAGAAATTTGACACCTTCAATGGGGAATGTCCAAATTTTGTATTTCCCTTAAATTCCATAATCAAGACTATTCAACCAAGGGTTGAAAAGAAAAAGCTTGATGGCTTTATGGGTAGAATTCGATCTGTCTATCCAGTTGCGTCACCAAATGAATGCAACCAAATGTGCCTTTCAACTCTCATGAAGTGTGATCATTGTGGTGAAACTTCATGGCAGACGGGCGATTTTGTTAAAGCCACTTGCGAATTTTGTGGCACTGAGAATTTGACTAAAGAAGGTGCCACTACTTGTGGTTACTTACCCCAAAATGCTGTTGTTAAAATTTATTGTCCAGCATGTCACAATTCAGAAGTAGGACCTGAGCATAGTCTTGCCGAATACCATAATGAATCTGGCTTGAAAACCATTCTTCGTAAGGGTGGTCGCACTATTGCCTTTGGAGGCTGTGTGTTCTCTTATGTTGGTTGCCATAACAAGTGTGCCTATTGGGTTCCACGTGCTAGCGCTAACATAGGTTGTAACCATACAGGTGTTGTTGGAGAAGGTTCCGAAGGTCTTAATGACAACCTTCTTGAAATACTCCAAAAAGAGAAAGTCAACATCAATATTGTTGGTGACTTTAAACTTAATGAAGAGATCGCCATTATTTTGGCATCTTTTTCTGCTTCCACAAGTGCTTTTGTGGAAACTGTGAAAGGTTTGGATTATAAAGCATTCAAACAAATTGTTGAATCCTGTGGTAATTTTAAAGTTACAAAAGGAAAAGCTAAAAAAGGTGCCTGGAATATTGGTGAACAGAAATCAATACTGAGTCCTCTTTATGCATTTGCATCAGAGGCTGCTCGTGTTGTACGATCAATTTTCTCCCGCACTCTTGAAACTGCTCAAAATTCTGTGCGTGTTTTACAGAAGGCC',
//     'AGATGCG'
//   )
// );
